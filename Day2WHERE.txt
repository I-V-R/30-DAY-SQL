üîç Mastering the WHERE Clause in SQL
üöÄ The WHERE clause filters your data like a pro ‚Äî here's how I use it to make queries smarter:
‚úÖ Filter rows based on conditions: 
SELECT * FROM orders WHERE status = 'Delivered'; 

‚úÖ Use comparison operators
SELECT * FROM orders WHERE price > 100 AND stock < 50 

‚úÖ Work with ranges using BETWEEN
SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-01-31' 

‚úÖ Match specific values using IN:
SELECT * FROM company WHERE department IN ('HR', 'Finance', 'IT') 

‚úÖ Find patterns with LIKE:
SELECT * FROM orders WHERE name LIKE 'A%' -- starts with A 

‚úÖ Handle missing data with IS NULL:
SELECT * FROM orders WHERE email IS NULL 

üîç More Pro-Level Uses of WHERE in SQL
‚úÖ Combine multiple conditions with AND / OR
SELECT * FROM employees WHERE department = 'Sales' AND salary > 50000;
üéØ Target precise rows using compound logic.

‚úÖ Use parentheses for clarity in complex filters
SELECT * FROM employees WHERE (status = 'Active' AND age > 30) OR (role = 'Manager')
üß† Avoid logic mistakes in multi-condition queries.

‚úÖ Apply WHERE in UPDATE / DELETE
UPDATE inventory SET stock = 0 WHERE discontinued = TRUE;
‚ö†Ô∏è Avoid full-table changes ‚Äî always filter!

‚úÖ Filter results in JOIN conditions too
SELCT * FROM orders o JOIN customers c ON o.cust_id = c.id WHERE c.country = 'India';
üåç Combine joins + filters for precise reporting.

‚úÖ Filter on derived columns using WHERE
SELECT price, price * 0.9 AS discounted FROM products WHERE price * 0.9 < 100;
üí° Use calculations directly inside your filters.

‚úÖ Don‚Äôt confuse WHERE with HAVING:
 Use WHERE for row-level filtering, HAVING for aggregate results.
SELECT dept, COUNT(*) FROM employees GROUP BY dept HAVING COUNT(*) > 10;

‚úÖ Pro Tip: Always use indexes and proper data types on columns used in WHERE for better performance.
